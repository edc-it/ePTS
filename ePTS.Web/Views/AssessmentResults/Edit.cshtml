@model ePTS.Models.ViewModels.AssessmentSummaryEditModel

@{
    ViewData["Title"] = "Edit Assessment Result";
}

<!--content start-->
<!--heading section start-->
<section>
    <!--breadcrumb start-->
    <div class="row">
        <div class="col-sm-12">
            <nav aria-label="breadcrumb">
                @if (ViewBag.ParentId != null)
                {
                    @await Component.InvokeAsync("InfoPanel", Model.InfoPanel)
                }
            </nav>
        </div>
    </div>
    <!--breadcrumb end-->
</section>
<!--heading section end-->
<!--infopanel section start-->
<section>
    <div class="row info-panel mb-0">
        <div class="col-sm-12">
            <div class="card mb-3 border">
                <div class="card-header text-dark">
                    <h2 class="card-title mb-0 text-dark px-2">
                        @Html.DisplayFor(model => model.InfoPanel!.OrganizationName)
                    </h2>
                    <div class="row justify-content-between pt-0 px-2 mb-1">
                        <div class="col me-auto">
                            <p class="card-subtitle mb-3">
                                @Html.DisplayFor(model => model.InfoPanel!.OrganizationType)
                            </p>
                        </div>
                    </div>
                </div>
                <div class="card-body pt-3 pb-2 bg-secondary-subtle rounded-bottom">
                    <div class="row my-0">
                        <div class="col-md-8 pe-lg-0 pe-md-0 mt-0 mb-1 pt-0">
                            <ul class="list-unstyled text-dark">
                                <li class="list-group-item">
                                    <span class="fw-bold">@Html.DisplayFor(model => model.InfoPanel!.OrganizationType):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.OrganizationName)</span>
                                </li>
                                <li class="list-group-item">
                                    <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.Code):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.Code)</span>
                                </li>
                                @if (Model.InfoPanel!.SchoolType != null)
                                {
                                    <li class="list-group-item">
                                        <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.SchoolType):</span>
                                        <span class="">@Html.DisplayFor(model => model.InfoPanel!.SchoolType)</span>
                                    </li>
                                }
                                <li class="list-group-item">
                                    <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.Address):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.Address)</span>
                                </li>
                                <li class="list-group-item">
                                    <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.SchoolAdministrationType):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.SchoolAdministrationType)</span>
                                </li>
                                <li class="list-group-item">
                                    <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.SchoolLanguage):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.SchoolLanguage)</span>
                                </li>
                                @*<li class="list-group-item">
                                <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.Enrolled):</span>
                                <span class="">Male: @Html.DisplayFor(model => model.InfoPanel!.EnrolledFemale),  </span>
                                <span class="">Female: @Html.DisplayFor(model => model.InfoPanel!.EnrolledMale), </span>
                                <span class="">Total: @Html.DisplayFor(model => model.InfoPanel!.Enrolled)</span>
                                </li>*@
                                <li class="list-group-item">
                                    <span class="fw-bold">Assessed:</span>
                                    <span class="">Male: @Html.DisplayFor(model => model.InfoPanel!.AssessedMale),</span>
                                    <span class="">Female: @Html.DisplayFor(model => model.InfoPanel!.AssessedFemale),</span>
                                    <span class="">Total: @Html.DisplayFor(model => model.InfoPanel!.Assessed)</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-4 mt-0 pt-0 mt-md-0 text-lg-end text-md-end ps-lg-0 ps-md-0 ">
                            <ul class="list-unstyled text-dark">
                                @if (Model.InfoPanel!.LocationParent != null)
                                {
                                    @foreach (var item in Model.InfoPanel.LocationParent)
                                    {
                                        <li class="list-group-item">
                                            <span class="fw-bold">
                                                @item.LocationType:
                                            </span>
                                            <span>
                                                @item.LocationName
                                            </span>
                                        </li>
                                    }
                                }
                                @if (Model.InfoPanel.OrganizationTypeId == 6)
                                {
                                    <li class="list-group-item">
                                        <span class="fw-bold">
                                            @Html.DisplayNameFor(model => model.InfoPanel!.Zone):
                                        </span>
                                        <span>
                                            @Html.DisplayFor(model => model.InfoPanel!.Zone)
                                        </span>

                                    </li>
                                }
                                <li class="list-group-item">
                                    <span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.SchoolLocation):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.SchoolLocation)</span>
                                </li>
                                @if (Model.InfoPanel.Latitude != null)
                                {
                                    <li class="list-group-item">
                                        <a href="https://www.google.com/maps?q=@Model.InfoPanel.Latitude,@Model.InfoPanel.Longitude" class="btn btn-default p-0 m-0" target="_blank">
                                            <i class="bi bi-geo-alt-fill"></i>
                                            Map
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-3 mb-2">
                            <ul class="list-group">
                                <li class="list-group-item">
                                    <i class="bi bi-calendar3 text-secondary pe-2"></i><span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.SchoolAcademicYear):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.AcademicYear)</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-3 mb-1">
                            <ul class="list-group">
                                <li class="list-group-item">
                                    <i class="bi bi-mortarboard-fill text-secondary pe-2"></i><span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.GradeLevel):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.GradeLevel)</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-3 mb-1">
                            <ul class="list-group">
                                <li class="list-group-item">
                                    <i class="bi bi-calendar-week-fill text-secondary pe-2"></i><span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.AssessmentTerm):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.AssessmentTerm)</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-3 mb-1">
                            <ul class="list-group">
                                <li class="list-group-item">
                                    <i class="bi bi-calendar2-check text-secondary pe-2"></i><span class="fw-bold">@Html.DisplayNameFor(model => model.InfoPanel!.AssessmentWeek):</span>
                                    <span class="">@Html.DisplayFor(model => model.InfoPanel!.AssessmentWeek)</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!--infopanel section end-->
<!--footer buttons start-->
<div class="row pt-0 mb-3 align-content-end text-end">
    <div class="col-sm-12">
        <a asp-action="Index" id="cancel" asp-route-id="@ViewBag.ParentId" class="btn btn-outline-secondary me-1 cancel-button"><i class="bi bi-arrow-return-left"></i> Cancel</a>
        <button id="submitbutton" type="submit" value="AssessmentResults" class="btn btn-primary save-button" data-style="expand-left" data-spinner-color="black">
            <i class="bi bi-save" aria-hidden="true"></i> Save
        </button>
    </div>
</div>
<!--footer buttons end-->
<!--assessment performance content section start-->
<form id="main-form" asp-action="Edit" method="POST" class="needs-validation" novalidate>
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @*<input type="hidden" value="@ViewBag.ParentId" name="GroupId" id="GroupId" />*@

    <div class="row pt-0 mb-3 justify-content-end text-end">
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4 text-end">
            @*<label for="RegistrationDate" class="form-label">Data entry date:</label>
            <input class="form-control text-end" type="text" id="RegistrationDate" name="RegistrationDate" placeholder="Select the data entry date" value="" required tabindex="1" />
            <div class="form-text">Use format Year-Month-Day (YYYY-MM-DD)</div>
            <div class="invalid-feedback">
                Please select the data entry date.
            </div>*@

            <label asp-for="RegistrationDate" class="control-label"></label>
            <input asp-for="RegistrationDate" class="form-control text-end" type="text" placeholder="Select the data entry date" required tabindex="1000" value="@Model.AssessmentResults?[0].RegistrationDate.Date.ToString("yyyy-MM-dd")" />
            <div class="form-text">Use format Year-Month-Day (YYYY-MM-DD)</div>
            <span asp-validation-for="RegistrationDate" class="text-danger"></span>
        </div>
    </div>
    <section>
        <div class="row mb-0">
            <div class="col mb-0">
                <div class="card">
                    <!--content header start-->
                    <div class="card-header text-dark d-flex bg-secondary-subtle justify-content-lg-between">
                        <h5 class="card-title mb-1 text-dark ">
                            Performance level descriptor
                        </h5>
                        <!--create button start-->
                        <div class="btn-group btn-group-sm mb-2 text-end" role="group" aria-label="creategroup">
                            @*<a policy="RequireCreateRole" asp-action="Create" asp-route-id="@ViewBag.ParentId" role="button" class="btn btn-sm btn-outline-secondary me-2">
                            <i class="bi bi-plus-circle"></i>
                            Create New
                            </a>*@
                        </div>
                        <!--create button end-->
                    </div>
                    <!--content header end-->
                    <!--conent start-->
                    <div class="card-body p-0">
                        <!--toolbar start-->
                        <div class="row mx-0 mb-0 pt-2 px-3 bg-secondary-subtle border-secondary-subtle border-bottom border-1">
                            <div class="col-sm-12 col-md-6 d-flex align-items-center justify-content-start">
                                <div id="toolbar1" class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                                    <!--create button start-->
                                    @*<div class="btn-group btn-group-sm mb-2" role="group" aria-label="creategroup">
                                    <a policy="RequireCreateRole" asp-action="Create" asp-route-id="@ViewBag.ParentId" role="button" class="btn btn-sm btn-outline-secondary me-2">
                                    <i class="bi bi-plus-circle"></i>
                                    Create New
                                    </a>
                                    </div>*@
                                    <!--create button end-->
                                </div>
                            </div>
                            @*<div class="col-sm-12 col-md-6 d-flex align-items-center justify-content-end">
                            <!--datatable search start-->
                            <div class="input-group input-group-sm d-print-none pb-2">
                            <span class="input-group-text" id="search"><i class="bi bi-search" aria-hidden="true"></i></span>
                            <input id="searchbox" type="text" class="form-control" placeholder='Search' aria-describedby="search">
                            </div>
                            <!--datatable search end-->
                            </div>*@
                        </div>
                        <!--toolbar end-->
                        <div class="table-responsive col-sm-12">
                        </div>
                    </div>
                    <!--content end-->
                    <!--content footer start-->
                    <div class="dataTables_wrapper" id="datatable-footer2">
                        <!--table start-->
                        <table id="datatable2" class="card-body table table-hover table-striped display responsive no-wrap mb-0 pb-0 w-100 dataTables_wrapper dt-bootstrap5 no-footer">
                            <!--table head start-->
                            <thead>
                                <tr>
                                    <th data-priority="6">
                                        Term
                                    </th>
                                    <th data-priority="5">
                                        Week
                                    </th>
                                    <th data-priority="2">
                                        Performance Level
                                    </th>
                                    <th data-priority="3">
                                        Sex
                                    </th>
                                    <th data-priority="4">
                                        Assessed
                                    </th>
                                    <th data-priority="1" class="text-end">
                                        <span class="d-none d-sm-inline">Learners Score</span>
                                        <span class="d-inline d-sm-none">Learners Score</span>
                                    </th>
                                </tr>
                            </thead>
                            <!--table head end-->
                            <!--table body start-->
                            <tbody>
                                @for (int i = 0; i < Model.AssessmentPerformanceLevels!.Count(); i++)
                                {
                                    <tr>
                                        <td>
                                            @Html.Hidden("performance.Index", (@i + 10))
                                            @Html.Hidden("performance[" + (@i + 10) + "].GradebookAssessmentId", Model.AssessmentPerformanceLevels![i].GradebookAssessmentId)
                                            @Html.Hidden("performance[" + (@i + 10) + "].AssessmentPerformanceLevelId", Model.AssessmentPerformanceLevels![i].AssessmentPerformanceLevelId)
                                            @Html.Hidden("performance[" + (@i + 10) + "].RefSexId", Model.AssessmentPerformanceLevels![i].RefSexId)
                                            @Html.Hidden("performance[" + (@i + 10) + "].RefPerformanceLevelId", Model.AssessmentPerformanceLevels![i].RefPerformanceLevelId)
                                            @Html.Raw(Model.AssessmentPerformanceLevels![i].Term)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentPerformanceLevels![i].Week)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentPerformanceLevels![i].PerformanceLevel)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentPerformanceLevels![i].Sex)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentPerformanceLevels![i].Assessed)
                                        </td>
                                        <td>
                                            <div class="input-group justify-content-end flex-nowrap">
                                                @Html.TextBox("performance[" + (@i + 10) + "].Score", Model.AssessmentPerformanceLevels[i].Score, new { @Class = "performance form-control required text-end", data_assessed_value = Model.AssessmentPerformanceLevels[i].Assessed, data_sex_value = Model.AssessmentPerformanceLevels[i].RefSexId, data_performance = i, tabindex = i + 100, data_val = "true", data_val_required = "This field is required", autocomplete = "off", inputmode = "numeric" })
                                                <span class="input-group-text bg-light" style="width:42px;">
                                                    @Html.Raw(Model.AssessmentPerformanceLevels[i].SexId)
                                                </span>
                                                <span class="input-group-text text-white text-center" style="width:60px; background-color: @Html.Raw(Model.AssessmentPerformanceLevels[i].Color);">
                                                    @Html.Raw(Model.AssessmentPerformanceLevels[i].Code)
                                                </span>
                                                <span class="input-group-text bg-light">
                                                    <i class="bi bi-info-circle" data-container="body" data-bs-toggle="tooltip" data-bs-custom-class="custom-tooltip" data-bs-placement="top" data-bs-title="# of @Html.Raw(Model.AssessmentPerformanceLevels[i].Sex) Learners Scoring @Html.Raw(Model.AssessmentPerformanceLevels[i].PerformanceLevelText) out of 20"></i>
                                                </span>
                                            </div>
                                            <span style="display:block;" data-valmsg-for="performance[@(i + 10)].Score" class="text-danger text-wrap field-validation-valid" data-valmsg-replace="true"></span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <!--table body end-->
                        </table>
                        <!--table end-->
                    </div>
                    <!--content footer end-->
                    <!--content footer start-->
                    @*<div class="dataTables_wrapper" id="datatable-footer">
                    </div>*@
                    <!--content footer end-->
                </div>
            </div>
        </div>
    </section>
    <!--assessment performance content section end-->
    <!--assessment results content section start-->
    <section>
        <div class="row mb-0">
            <div class="col mb-0">
                <div class="card">
                    <!--content header start-->
                    <div class="card-header text-dark d-flex bg-secondary-subtle justify-content-lg-between">
                        <h5 class="card-title mb-1 text-dark">
                            Learners with correct answers
                        </h5>
                        <!--create button start-->
                        <div class="btn-group btn-group-sm mb-2 text-end" role="group" aria-label="creategroup">
                            @*<a policy="RequireCreateRole" asp-action="Create" asp-route-id="@ViewBag.ParentId" role="button" class="btn btn-sm btn-outline-secondary me-2">
                            <i class="bi bi-plus-circle"></i>
                            Create New
                            </a>*@
                        </div>
                        <!--create button end-->
                    </div>
                    <!--content header end-->
                    <!--conent start-->
                    <div class="card-body p-0">
                        <!--toolbar start-->
                        <div class="row mx-0 mb-0 pt-2 px-3 bg-secondary-subtle border-secondary-subtle border-bottom border-1">
                            <div class="col-sm-12 col-md-6 d-flex align-items-center justify-content-start">
                                <div id="toolbar2" class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                                    <!--create button start-->
                                    @*<div class="btn-group btn-group-sm mb-2" role="group" aria-label="creategroup">
                                    <a policy="RequireCreateRole" asp-action="Create" asp-route-id="@ViewBag.ParentId" role="button" class="btn btn-sm btn-outline-secondary me-2">
                                    <i class="bi bi-plus-circle"></i>
                                    Create New
                                    </a>
                                    </div>*@
                                    <!--create button end-->
                                </div>
                            </div>
                            @*<div class="col-sm-12 col-md-6 d-flex align-items-center justify-content-end">
                            <!--datatable search start-->
                            <div class="input-group input-group-sm d-print-none pb-2">
                            <span class="input-group-text" id="search"><i class="bi bi-search" aria-hidden="true"></i></span>
                            <input id="searchbox" type="text" class="form-control" placeholder='Search' aria-describedby="search">
                            </div>
                            <!--datatable search end-->
                            </div>*@
                        </div>
                        <!--toolbar end-->
                        <div class="table-responsive col-sm-12">
                        </div>
                    </div>
                    <!--content end-->
                    <!--content footer start-->
                    <div class="dataTables_wrapper" id="datatable-footer1">
                        <!--table start-->
                        <table id="datatable1" class="card-body table table-hover table-striped display responsive no-wrap mb-0 pb-0 w-100 dataTables_wrapper dt-bootstrap5 no-footer">
                            <!--table head start-->
                            <thead>
                                <tr>
                                    <th data-priority="5">
                                        Term
                                    </th>
                                    <th data-priority="4">
                                        Week
                                    </th>
                                    <th data-priority="3">
                                        Category
                                    </th>
                                    <th data-priority="2">
                                        Assessment Item
                                    </th>
                                    <th data-priority="1" class="text-end">
                                        <span class="d-none d-sm-inline">Learners with correct answers</span>
                                        <span class="d-inline d-sm-none">Learners correct</span>
                                    </th>
                                </tr>
                            </thead>
                            <!--table head end-->
                            <!--table body start-->
                            <tbody>
                                @for (int i = 0; i < Model.AssessmentResults!.Count(); i++)
                                {
                                    <tr>
                                        <td>
                                            @Html.Hidden("results.Index", (@i + 10))
                                            @Html.Hidden("results[" + (@i + 10) + "].GradebookAssessmentId", Model.AssessmentResults![i].GradebookAssessmentId)
                                            @Html.Hidden("results[" + (@i + 10) + "].AssessmentResultId", Model.AssessmentResults![i].AssessmentResultId)
                                            @Html.Hidden("results[" + (@i + 10) + "].AssessmentItemId", Model.AssessmentResults![i].AssessmentItemId)
                                            @Html.Hidden("results[" + (@i + 10) + "].AssessmentItemId", Model.AssessmentResults![i].RegistrationDate)
                                            @Html.Raw(Model.AssessmentResults[i].AssessmentTerm)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentResults[i].AssessmentWeek)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentResults[i].AssessmentCategory)
                                        </td>
                                        <td>
                                            @Html.Raw(Model.AssessmentResults[i].AssessmentItemText)
                                        </td>
                                        <td>
                                            <div class="input-group justify-content-end flex-nowrap">
                                                @Html.TextBox("results[" + (@i + 10) + "].Score", Model.AssessmentResults[i].Score, new { @Class = "results form-control required text-end", data_assessed_value=Model.InfoPanel.Assessed, data_results = i, tabindex = i + 108, data_val = "true", data_val_required = "This field is required", autocomplete = "off", inputmode = "numeric" })
                                                <div class="input-group-append">
                                                    <span class="input-group-text bg-light">
                                                        @Html.Raw(Model.AssessmentResults[i].AssessmentItemText) Learners
                                                    </span>
                                                </div>
                                            </div>
                                            <span style="display:block;" data-valmsg-for="results[@(i + 10)].Score" class="text-danger text-wrap field-validation-valid" data-valmsg-replace="true"></span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <!--table body end-->
                        </table>
                        <!--table end-->
                    </div>
                    <!--content footer end-->
                    <!--content footer start-->
                    @*<div class="dataTables_wrapper" id="datatable-footer">
                    </div>*@
                    <!--content footer end-->
                </div>
            </div>
        </div>
    </section>
    <!--assessment results content section end-->
    <!--content end-->
</form>

<div class="row pt-0 mb-3 align-content-end text-end">
    <div class="col-sm-12">
        <a asp-action="Index" id="cancel" asp-route-id="@ViewBag.ParentId" class="btn btn-outline-secondary me-1 cancel-button"><i class="bi bi-arrow-return-left"></i> Cancel</a>
        <button id="submitbutton" type="submit" value="AssessmentResults" class="btn btn-primary save-button" data-style="expand-left" data-spinner-color="black">
            <i class="bi bi-save" aria-hidden="true"></i> Save
        </button>
    </div>
</div>

@section Styles {
    @{
        await Html.RenderPartialAsync("_ListStylesPartial");
    }
    <link href="~/lib/vanillajs-datepicker/dist/css/datepicker.css" rel="stylesheet" />
    <link href="~/lib/vanillajs-datepicker/dist/css/datepicker-bs5.min.css" rel="stylesheet" />
    <style>
        /*.status {
                                                    max-width: 120px;
                                                }*/

        .results, .performance {
            max-width: 85px;
        }

        /*.field-validation-error {
                                                    color: red;
                                                    font-size: smaller;
                                                }*/

        /*.table td {
                                                    vertical-align: baseline;
                                                }*/
    </style>
}
@section Scripts {
    @{
        //await Html.RenderPartialAsync("_ListScriptsPartial");
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script src="~/lib/vanillajs-datepicker/dist/js/datepicker.min.js" asp-append-version="true"></script>
    <script src="~/lib/datatables/datatables.min.js" asp-append-version="true"></script>
    
    <script>
        // DOM ready event listener
        document.addEventListener('DOMContentLoaded', function () {
            // Set DataTables options
            let dataTableOptions1 = getOptions(1);
            let dataTableOptions2 = getOptions(2);

            // Initialize DataTables
            let table1 = new DataTable('#datatable1', dataTableOptions1);
            let table2 = new DataTable('#datatable2', dataTableOptions2);

            // Call post initialization function
            postInitialization(table1, '#toolbar1', '#dtfooter1', '#datatable-footer1');
            postInitialization(table2, '#toolbar2', '#dtfooter2', '#datatable-footer2');

            // Add event listener to resize table on window resize
            //window.addEventListener('resize', function () {
            //    table1.columns.adjust().draw();
            //    table2.columns.adjust().draw();
            //});

        });

        // Generate DataTables options
        function getOptions(option) {
            return {
                order: [],
                lengthChange: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                processing: true,
                searchHighlight: true,
                orderClasses: true,
                pagingType: "full",
                pageLength: 10,
                filter: true,
                orderMulti: false,
                paging: false,
                ordering: false,
                info: true,
                searching: false,
                responsive: true,
                responsive: {
                    details: false
                },
                autoWidth: true,
                dom: "tr",
                //+ "<'row'"
                //+ "<'col-sm-12 col-md-6 col-form-label 'l>"
                //+ "<'col-sm-12 col-md-6 justify-content-end'Bp>"
                //+ ">"
                //+ "<'row'<'col-sm-12'lBp>"
                //+ ">" + ">",
                //dom: "tr<'#dtfooter"+option+".card-footer table_bg pt-2 pb-3 bg-secondary-subtle'"
                //    //+ "<'row'"
                //    //+ "<'col-sm-12 col-md-6 col-form-label 'l>"
                //    //+ "<'col-sm-12 col-md-6 justify-content-end'Bp>"
                //    //+ ">"
                //    + "<'row'<'col-sm-12'lBpi>"
                //    + ">" + ">",
                columnDefs: [{ targets: [-1], width: '290px' }],
                //buttons: getButtonOptions(),
                buttons: [],
                //language: getLanguageOptions(),
                initComplete: function (settings, json) { },
                //drawCallback: function () {
                //    let pageLinks = document.querySelectorAll('#datatable_paginate .page-link');
                //    pageLinks.forEach(function (link) {
                //        link.classList.remove('page-link');
                //        link.classList.add('btn', 'btn-outline-secondary', 'me-1', 'btn-sm');
                //    });
                //}
            };
        }

        // Generate Button options
        function getButtonOptions() {
            return {
                dom: { button: { className: 'btn btn-outline-secondary btn-sm mb-2' } },
                buttons: [
                    getCopyButton(),
                    getExportButton(),
                    getPrintButton()
                ]
            };
        }

        // Generate Copy Button
        function getCopyButton() {
            return { extend: 'copyHtml5', text: '<i class="bi bi-clipboard"></i> Copy', titleAttr: 'Copy' };
        }

        // Generate Export Button
        function getExportButton() {
            return {
                extend: 'excelHtml5',
                text: '<i class="bi bi-box-arrow-up-right"></i> Export',
                titleAttr: 'Export',
                charset: 'UTF-16LE',
                bom: true,
                fieldSeparator: ',',
                fieldBoundary: '"',
                exportOptions: { columns: ':not(:last-child)' },
                filename: function () { return generateFileName(); }
            };
        }

        // Generate Print Button
        function getPrintButton() {
            return {
                extend: 'print',
                text: '<i class="bi bi-printer"></i> Print',
                titleAttr: 'Print',
                title: '',
                autoPrint: true,
                exportOptions: { columns: ':not(:last-child)', stripHtml: true, stripNewlines: true },
                customize: function (window) { customizePrintWindow(window); }
            };
        }

        // Generate Language options
        function getLanguageOptions() {
            return {
                paginate: {
                    "first": "<i class='bi bi-chevron-double-left'></i>",
                    "last": "<i class='bi bi-chevron-double-right'></i>",
                    "next": "<i class='bi bi-chevron-right'></i>",
                    "previous": "<i class='bi bi-chevron-left'></i>"
                }
            };
        }

        // Generate filename for export
        function generateFileName() {
            var date = new Date();
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var hour = date.getHours();
            var minutes = date.getMinutes();
            var datepart = ((year * 100 + month + 1) * 100 + day) + "_" + (hour * 100 + minutes);
            return document.title + "_" + datepart;
        }

        // Customize print window
        function customizePrintWindow(window) {
            window.document.body.style.fontSize = '10pt';
            window.document.body.style.paddingTop = '0px';

            // Get all tables in the document
            let tables = window.document.body.querySelectorAll('table');
            tables.forEach(function (table) {
                table.classList.add('compact', 'table-bordered');
                table.style.fontSize = 'inherit';
            });

            // Fetch the HTML content
            let heading = document.querySelector('.heading-panel').innerHTML;
            let panel = document.querySelector('.info-panel').innerHTML;

            // Create a new div and append the heading and panel
            let prependDiv = document.createElement('div');
            prependDiv.innerHTML = (window ? heading + '<br>' + panel : heading);

            // Insert the new div at the beginning of the body
            window.document.body.insertBefore(prependDiv, window.document.body.firstChild);

            // Fetch the info and create a new div
            let info = document.querySelector('.dataTables_info').textContent;
            let appendDiv = document.createElement('div');
            appendDiv.innerHTML = info + '<br>' + '@User.Identity!.Name - @DateTime.Now.ToShortDateString()';

            // Append the new div to the body
            window.document.body.appendChild(appendDiv);
        }

        // Post initialization actions
        function postInitialization(table, toolbarId, dtfooterId, datatableFooterId) {
            table.buttons(0, null).container().appendTo(toolbarId);


            // Filter table
            //let searchbox = document.getElementById('searchbox');
            //searchbox.addEventListener('keyup', function () {
            //    table.search(this.value).draw();
            //});

            // Style modifications
            $.fn.dataTable.ext.classes.sPageButton = 'page-item btn-light';
            $.fn.DataTable.ext.pager.numbers_length = 5;
            $.fn.dataTable.ext.classes.sPaging = ' p-2';

            // Move footer to bottom
            let dtfooter = document.querySelector(dtfooterId);
            let datatableFooter = document.querySelector(datatableFooterId);

            table.columns.adjust().draw();
            //datatableFooter.appendChild(dtfooter);
        }

        //var validator = $('#main-form').validate({ /* settings */ });
        //$('#submitbutton')
        //    .on('click', function (e) {
        //        var form = $('#main-form');
        //        form.submit();
        //        // prevents default submit
        //        //e.preventDefault();

        //        //var form = $('#main-form');
        //        //if (form.valid()) {
        //        //    // activates ladda-button 'loading..' style and disables submit button after one click
        //        //    //var l = Ladda.create(this);
        //        //    //l.start();

        //        //    // disable cancel button after submit
        //        //    $('#cancelbutton').addClass('disabled');
        //        //    // submit form
        //        //    form.submit();
        //        //}
        //        //else {
        //        //    // if form is valid submits, else focus to invalid fields
        //        //    //validator.focusInvalid();
        //        //}
        //    });

        //var settings = {
        //    validClass: "is-valid",
        //    errorClass: "is-invalid"

        //};

        //$.validator.setDefaults(settings);
        //$.validator.unobtrusive.options = settings;

        var settings = {
            validClass: "is-valid",
            errorClass: "is-invalid",
            highlight: function (element, errorClass, validClass) {
                $(element).addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).addClass(validClass).removeClass(errorClass);
            },
            invalidHandler: function (event, validator) {
                // 'validator' is an instance of a validator
                // 'validator.errorList' contains an array of elements with validation errors
                // 'validator.errorList[0].element' is the jQuery Object of the first invalid element
                if (validator.errorList.length) {
                    $(validator.errorList[0].element).focus();
                }
            }
        };

        $.validator.setDefaults(settings);
        $.validator.unobtrusive.options = settings;
        // Add a custom validation method that checks if input is not greater than assessed value
        $.validator.addMethod("notGreaterThanAssessedValue", function (value, element) {
            var assessedValue = $(element).data('assessed-value');
            return this.optional(element) || value <= assessedValue;
        }, function (params, element) {
            return "Input value is greater than the assessed value (" + $(element).data('assessed-value') + ").";
        });

        //Add a custom validation method that checks if input by sex is not greater than the total assessed value
        $.validator.addMethod("notGreaterThanTotalAssessedValueBySex", function (value, element) {
            var assessedValue = $(element).data('assessed-value');
            var sexValue = $(element).data('sex-value');
            var totalScoreBySex = 0;

            // Iterate through all score inputs to calculate the total score for the specified sex
            $(".performance").each(function () {
                if ($(this).data('sex-value') == sexValue) {
                    var scoreValue = parseFloat($(this).val()) || 0;
                    totalScoreBySex += scoreValue;
                }
            });

            // Check if the total score for the specified sex does not exceed the assessed value
            return this.optional(element) || totalScoreBySex <= assessedValue;
        }, function (params, element) {
            return "The total input value for this sex exceeds the assessed value (" + $(element).data('assessed-value') + ").";
        });

        $.validator.addMethod("sumEqualsAssessedValueBySex", function (value, element, params) {
            let sexValue = $(element).data('sex-value');
            let assessedValue = parseFloat($(element).data('assessed-value'));
            let totalScoreBySex = 0;
            let allFieldsFilled = true;

            // Sum values and check if all required fields for this sex are filled
            $(`.performance[data-sex-value="${sexValue}"]`).each(function () {
                let inputValue = parseFloat($(this).val());
                if (!inputValue && inputValue !== 0) {
                    allFieldsFilled = false; // Found an empty field
                } else {
                    totalScoreBySex += inputValue;
                }
            });

            // Attach the total sum to the element for access in the message function
            $(element).data('total-sum', totalScoreBySex.toFixed(2)); // Adjust decimal precision as needed

            // Validate only if all fields are filled, comparing total to assessed value
            if (allFieldsFilled) {
                return totalScoreBySex === assessedValue;
            }

            // If not all fields are filled, postpone validation (consider valid for now)
            return true;
        }, function (params, element) {
            // Access the total sum from the data attribute for the message
            let totalSum = $(element).data('total-sum');
            return `The total scores for this sex must sum exactly to the assessed value (${$(element).data('assessed-value')}). You've entered a total of ${totalSum}.`;
        });



        $(document).ready(function () {

            const elem = document.querySelector('input[name="RegistrationDate"]');
            const datepicker = new Datepicker(elem, {
                autohide: true,
                format: 'yyyy-mm-dd',
                updateOnBlur: false,
                buttonClass: 'btn',
            });

            // Add the custom validation method to your validation rules
            $(".performance, .results").each(function () {
                $(this).rules("add", {
                    notGreaterThanAssessedValue: true
                });
            });

            $(".performance").each(function () {
                $(this).rules("add", {
                    notGreaterThanTotalAssessedValueBySex: true
                });
            });

            $(".performance").each(function () {
                $(this).rules("add", {
                    sumEqualsAssessedValueBySex: true
                });
            });
            
            // Mark inputs as "interacted" once the user has changed or left the field
            $(".performance").on('blur change', function () {
                $(this).data('has-interacted', true);
            });
            

            
            var form = $('#main-form');
            // Define your form validation
            var validator = form.validate(settings);
            // Add event handler for form submit
            $(".save-button").on("click", function (e) {
                if (!validator.form()) { // if the form is valid
                    // Disable the submit and cancel buttons after the form is submitted
                    e.preventDefault(); // prevent the form from submitting
                } else {
                    // Disable the submit and cancel buttons after the form is submitted
                    $(".save-button, .cancel-button").prop("disabled", true);

                    // Add a spinner to the submit button and change its text
                    $(".save-button").html(`
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Saving...
                            `);

                    $("#main-form").submit();
                }
            });
            // Add event handler for cancel button click
            //$(".cancel-button").on("click", function (e) {
            //    e.preventDefault();
            //    // Here you can add what should happen when cancel is clicked
            //    // Example: window.location.href = '/'; for redirection to home page
            //});

            //Prevent Enter Key from submitting form
            //$(window).keydown(function (event) {
            //    if (event.keyCode == 13) {
            //        $(this).next('input').focus();
            //        event.preventDefault();
            //        return false;
            //    }
            //});
            //$('input').keypress(function (e) {
            //    if (e.which == 13) {
            //        e.preventDefault();
            //        $(this).next('input').focus();

            //    }
            //});
            
        });

        $(document).on("keypress", ".results, .performance", function (e) {
            //Only do something when the user presses enter
            if (e.keyCode == 13) {
                var nextElement = $('[tabindex="' + (this.tabIndex + 1) + '"]');
                console.log(this, nextElement);
                if (nextElement.length)
                    nextElement.focus()
                else
                    $('[tabindex="1"]').focus();
            }
        });

    </script>
}

